// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  username String
  password String
  sales    Sale[]
  role     String  @default("USER")
  active   Boolean @default(true)
  token    String?
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  barCode     String     @unique
  name        String
  description String
  price       Float
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleItems   SaleItem[]
}

model Sale {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  total        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  saleItems    SaleItem[]
  customerId   Int
  customer     Customer      @relation(fields: [customerId], references: [id])
  type         String        @default("CASH")
  salePayments SalePayment[]
  status       String        @default("OPEN")
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  document  String
  phone     String
  email     String
  address   String
  city      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}
