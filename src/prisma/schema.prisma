// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sales     Sale[]
  expenses  Expense[]
  invoices  Invoice[]
}

model Product {
  id          Int      @id @default(autoincrement())
  barcode     String?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
}

model Item {
  id           Int          @id @default(autoincrement())
  serialNumber String?
  name         String
  description  String?
  buy          Float
  sell         Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  saleItems    SaleItem[]
  product      Product      @relation(fields: [productId], references: [id])
  productId    Int
  itemNeededes ItemNeeded[]
}

model ItemNeeded {
  id        Int      @id @default(autoincrement())
  quantity  Int
  status    String   @default("open")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  note      String?
}

model Sale {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  saleItems    SaleItem[]
  customerId   Int?
  customer     Customer?     @relation(fields: [customerId], references: [id])
  type         String        @default("cash")
  salePayments SalePayment[]
  status       String        @default("open")
  invoiceId    String?
  note         String?
  total        Float         @default(0)
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentId String?
}

model SaleItem {
  id             Int       @id @default(autoincrement())
  saleId         Int
  sale           Sale?     @relation(fields: [saleId], references: [id])
  itemId         Int
  quantity       Int
  price          Float
  note           String?
  total          Float
  startGuarantee DateTime?
  endGuarantee   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  item           Item?     @relation(fields: [itemId], references: [id])
  rateId         Int?
  rate           Rate?     @relation(fields: [rateId], references: [id])
}

model Expense {
  id         Int       @id @default(autoincrement())
  invoiceId  String?
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id])
  amount     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Rate {
  id        Int        @id @default(autoincrement())
  value     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  saleItems SaleItem[]
  invoices  Invoice[]
}

model Invoice {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  note        String?
  type        String    @default("debit")
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  amount      Float
  customerId  Int?
  customer    Customer? @relation(fields: [customerId], references: [id])
  payments    Payment[]
  rateId      Int?
  rate        Rate?     @relation(fields: [rateId], references: [id])
  data        String?   @default("[]")
}

model Payment {
  id        Int      @id @default(autoincrement())
  note      String?
  amount    Float
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?
}
