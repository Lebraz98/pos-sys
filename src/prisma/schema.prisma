// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sales     Sale[]
  expenses  Expense[]
}

model Product {
  id          Int      @id @default(autoincrement())
  barcode     String?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
}

model Item {
  id           Int        @id @default(autoincrement())
  serialNumber String?
  name         String
  description  String?
  buy          Float
  sell         Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  saleItems    SaleItem[]
  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
}

model Sale {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  saleItems    SaleItem[]
  customerId   Int
  customer     Customer      @relation(fields: [customerId], references: [id])
  type         String        @default("CASH")
  salePayments SalePayment[]
  status       String        @default("OPEN")
  invoiceId    String?
  note         String?
}

model SalePayment {
  id        Int      @id @default(autoincrement())
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  amount    Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentId String?
}

model SaleItem {
  id             Int       @id @default(autoincrement())
  saleId         Int
  sale           Sale?     @relation(fields: [saleId], references: [id])
  itemId         Int
  quantity       Int
  price          Float
  note           String?
  total          Float
  startGuarantee DateTime?
  endGuarantee   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  item           Item?     @relation(fields: [itemId], references: [id])
}

model Expense {
  id         Int       @id @default(autoincrement())
  invoiceId  String?
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id])
  amount     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
